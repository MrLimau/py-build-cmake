name: Python Wheel (Windows)

on:
  push:
  release:
    types: ['released', 'prereleased']

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - name: Build
      shell: powershell
      run: |
        python -m venv py-venv
        ./py-venv/Scripts/Activate.ps1
        python -m pip install build
        python -m build .
      env:
        PYTHONUTF8: 1
    - name: Upload Wheel
      uses: actions/upload-artifact@v2
      with:
        name: py_build_cmake-whl-${{ matrix.python-version }}
        path: dist/py_build_cmake-*.whl
    - name: Upload source
      uses: actions/upload-artifact@v2
      with:
        name: py_build_cmake-src-${{ matrix.python-version }}
        path: dist/py-build-cmake-*.tar.gz

  test:
    needs: build
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: py_build_cmake-whl-${{ matrix.python-version }}
        path: dist
    - name: Run Nox
      run: |
        python -m pip install nox
        python -m nox
      env:
        PY_BUILD_CMAKE_WHEEL_DIR: dist

  # release:
  #   if: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
  #   needs: build test
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       python-version: ['3.8', '3.9', '3.10']
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions/setup-python@v2
  #     name: Install Python
  #     with: 
  #       python-version: ${{ matrix.python-version }}
  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: py_build_cmake-whl-${{ matrix.python-version }}
  #       path: dist
  #   - name: 'Install py_build_cmake'
  #     run: python -m pip install --find-links=dist py_build_cmake
  #   - name: 'Check py_build_cmake version'
  #     run: |
  #       "${{ github.event.release.tag_name }}" -eq "$(python -c 'from importlib.metadata import version as v; print(v(\"py_build_cmake\"))')"
  #     shell: powershell
  #   - name: 'Install Twine'
  #     run: python -m pip install twine
  #   - name: 'Upload Wheel to PyPi'
  #     run: python -m twine upload dist/py_build_cmake-*.whl
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PyPI }}
