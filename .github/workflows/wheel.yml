name: Python Wheel (Linux)

on:
  push:
  release:
    types: ['released', 'prereleased']

jobs:
  build:
    runs-on: ubuntu-latest
    container: tttapa/alpaqa-build-python-gcc:${{ matrix.python-version }}-11
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v1
    - name: Cache Virtual Environment
      id: cache-venv
      uses: actions/cache@v2
      with:
        path: "/tmp/py-venv"
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('scripts/ci/install-patchelf.sh') }}
    - name: Install Python Virtual Environment 
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        python3 -m venv /tmp/py-venv
        . /tmp/py-venv/bin/activate
        bash scripts/ci/install-patchelf.sh
        python -m pip install build auditwheel cmake ninja
      env:
        CXXFLAGS: "-march=skylake -static-libstdc++ -static-libgcc"
        LDFLAGS: "-static-libstdc++ -static-libgcc"
        CFLAGS: "-march=skylake -static-libgcc"
        FC: gfortran
    - name: Build
      run: |
        . /tmp/py-venv/bin/activate
        python -m build . --wheel
        LD_LIBRARY_PATH=$VIRTUAL_ENV/lib \
          auditwheel repair --plat manylinux_2_27_x86_64 \
          dist/py_build_cmake-*.whl
      env:
        CXXFLAGS: "-march=skylake -static-libstdc++ -static-libgcc"
        LDFLAGS: "-static-libstdc++ -static-libgcc"
        CFLAGS: "-march=skylake -static-libgcc"
        FC: gfortran
    - name: Upload Wheel
      uses: actions/upload-artifact@v2
      with:
        name: py_build_cmake-whl-${{ matrix.python-version }}
        path: wheelhouse/py_build_cmake-*manylinux*.whl
    # - name: Upload source
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: py_build_cmake-src-${{ matrix.python-version }}
    #     path: dist/py_build_cmake-*.tar.gz

  test:
    needs: build
    runs-on: ubuntu-latest
    container: python:${{ matrix.python-version }}-bullseye
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v1
    - uses: actions/download-artifact@v2
      with:
        name: py_build_cmake-whl-${{ matrix.python-version }}
        path: wheelhouse
    - name: Install py_build_cmake
      run: |
        python -m pip install --find-links=wheelhouse py_build_cmake
        python -m pip install pytest
    - name: 'Run tests'
      run: python -m pytest

  # release:
  #   if: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
  #   needs: test
  #   runs-on: ubuntu-latest
  #   container: python:${{ matrix.python-version }}-bullseye
  #   strategy:
  #     matrix:
  #       python-version: ['3.8', '3.9', '3.10']
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: py_build_cmake-whl-${{ matrix.python-version }}
  #       path: wheelhouse
    
  #   - name: 'Install py_build_cmake'
  #     run: pip install --find-links=wheelhouse py_build_cmake
  #   - name: 'Check py_build_cmake version'
  #     run: |
  #       [ "${{ github.event.release.tag_name }}" == "$(python -c 'from importlib.metadata import version as v; print(v("py_build_cmake"))')" ]
  #     shell: bash
  #   - name: 'Install Twine'
  #     run: pip install twine
  #   - name: 'Upload Wheel to PyPi'
  #     run: python -m twine upload wheelhouse/py_build_cmake-*.whl
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PyPI }}
  #   - uses: actions/download-artifact@v2
  #     if: ${{ matrix.python-version == '3.10' }}
  #     with:
  #       name: py_build_cmake-src-${{ matrix.python-version }}
  #       path: dist
  #   - name: 'Upload source to PyPi'
  #     if: ${{ matrix.python-version == '3.10' }}
  #     run: python -m twine upload dist/py_build_cmake-*.tar.gz
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PyPI }}
